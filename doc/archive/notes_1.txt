void set_rgb(u8 led_index,u8 rgb_index,u8 brightness);// led_index[0-9], rgb_index[0-2], brightness[0-255]
void set_white(u8 led_index,u8 brightness);// led_index[0-11], brightness [0-255]
void set_debug(u8 brightness);
//void set_led_count(u8 led_count);//led_count [0-41] of non-zero illuminated RGB+White LEDs
void flush_leds(u8 led_count);//pushes the temprory values live to the periphreal
void reset_leds();//sets all rgb+white LEDs to 0 brightness
uint8_t get_audio();//sampling at 1-4 kHz, updating a state machine at 256 states (4-16 Hz updates)
//bool get_button(bool is_left);//return true if button is pressed.  does NOT perform de-bouncing
u32 millis();//returns a long value of the current time stamp (UNIX milliseconds since 1/1/1970)
bool delay(u16 milliseconds);//milliseconds to wait for.  returns true on success (completed wait operation).  returns false if wait was interrupted (ex. by button push)
bool is_space_bits();//returns true if the SAO is configered for the Space Bits team, otherwise returns false for the 
char readEEPROM(u8 address);//fetch value from EEPROM
void writeEPROM(u8 address,u8 value);//push value into EEPROM
bool is_button_pressed(bool is_left,bool is_short); //isButtonPressed(true,true); returns true if the left button is pressed for 0.05-2 seconds.  (true,false) returns true if left button has been pressed for >2 seconds.  so bool is_right=isButtonPressed(false,true) || isButtonPressed((false,false); is expected here
void clear_button_pressed(bool is_left,bool is_short); //call this after you consume/use or otherwise respond to a button press event
bool is_application_valid(); //when you do infinite while(true) loops, use this method for the "true" part.  I'll be polling for console UART content and timeouts here.  When there are external events, this method will return false and the submenu will exit up to the top level menu.


//UART:
//t # //get time with no parameters, set time with one decimal number.
//  u# //DEPRECITED, was going to used to correct sub-second clock drivt residual; assumed to be negliable and low-priority
//e # # //write to eeprom directly.  numbers are in human-readable DEC (not 0-255 in every char; this avoid issue with 10 being read as '\n')
//e # //read eeprom char at address
//h help (prints epprom status and current time)
//p ping (echo's UART commands sent to it: between 'p' character and \n)
//  s# system diagnostic (test all peripherals: blink leds, read audio and output to terminal: 1k samples).  diagnostic 0 is all leds and mic check.  diagnsotic 1 is current time (millis()/1000): the 10 LSB piped out to RGB LEDs
//l # # # //light up the given RGB led at the given brightness (0-9, 0-2, 0-255)
//w # # //light up the given white led at the given brightness (applicable to Space SAO only, others will have current leakage on red+green LEDs over non-populated part)
//a //prints the audio level continuosuly until a new line character is detected

//EEPROM:
//0 DEVELOPMENT
//1 TEST (sw revision id)
//2 Space Bits (1 for team, 0 for cute sales)
//3 DEVICE ID
//4-7 baseline start ms
//8-11 time base ms
//12 +/- 1 ms

//diagnostic menu: the LSB 10 bits of the current time (millis()/1000) are mapped to the RGB around the periphery.  When time is syncronized, across all badges, they all tick-tock in unison

void t()
{
	eeprom.write(4:7,UART.read());
	tms=0;
}

void u()
{
	u16 diff_residual=tms-UART.read();//how far off time-at-tone was from expectation
	long diff_baseline=UART.read()-eeprom.write(4:7);
	diff_baseline/=diff_residual;
	eepromt.write(8:11,diff_baseline<0?-diff_baseline:diff_baseline);//write positive number to flash
	eeprom.write(diff_baseline<0?-1:1);
}

#define RGB_LED_COUNT 9
#define WHITE_LED_COUNT 11

rules:
- for digital read/write, must use the methods above
- in order to use a variable, must declare at the beginning of a method
- types: int (signaed 16-bit), char/uint8_t unsigned 0-255, long (4-byte), bool

menus


sudo sode for audio:
void submenu_audio()
{
	u8 audio_level,led_index;
	audio_level=get_audio();
	reset_leds();
	for(led_index=0;led_index<RGB_LED_COUNT;led_index++)
	{
		if(audio_level/4>led_index)
		{
			if(led_index<6) set_rgb(led_index,1,255);
			else if(led_index<6) set_rgb(led_index,1,255);
			else(led_index<6) set_rgb(led_index,1,255);
		}
	}
	set_led_count(12);//6 greens, 2 yellows (green+red), 2 reds
	flush_leds();
}

//PRECON: when entering a submenu, the millis() is recorded in submenu_start_tms
//u32 submenu_millis();//returns the millisconds since starting this submenu

void top_menu()
{
	while(1):
	{
		//buttons state stuff...
		switch(submenu_index)
		{
			case  0:
			{
				
			}
			case 1:
			{
				display_only_morse();
			}
		}
	}
}


//given millis9), determine what frame content to display (single frame)
void display_only_morse(bool is_first_call)
{
	u8 is_dit_dah;
	reset_leds();
	char str="space bits";//PRECON lower case
	u32 millis_elapsed=millis()-submenu_start_millis;
	is_dit_dah=get_morse_state(str,millis_elapsed,300);
	switch(is_dit_dah)
	{
		case 1://display a dit pattern
			//set leds 5-9 blue
		{
			
		}
		case 2:
		{//display a dah pattern
			//set leds 0-4 green
		}
		default:{}//off
	}else{
		
	}
}

//numbers 5 did/das
//number 0-9, 'a' at 10 .. 'z' at 35
//3 LSB are the number of dah/dits (morse[N] & 0x07 = 3 LSB's: a value between 0 and 5)
//5 MSB are the dah (1), dit (0)
//bits 0-2 are the count of dah dits
//bit 3 is the first dih/dah, bit 7 is the last one
const u8 morse[36]={0b01110100,0b00110011};

/**
 * The given code is a function that determines the state of a Morse code LED
 * based on a string and a specific moment in time.
 * 
 * Allowable characters: 'a-z', '0-9', ' ', and '\0'
 * No capital characters are allowed
 *
 * @param array The input string
 * @param millis_elapsed The time elapsed in milliseconds
 * @param timebase_millis The base time for each Morse code element
 * @return 0 if LED is OFF; 1 is a dit, 2 if dah              
 */
u8 get_morse_state(char array[], u32 millis_elapsed, u16 timebase_millis)
{
	u8 char_index=0;
	
	// Stores the compressed representation of the Morse code (3 bits for the 
	// count and 5 bits for pattern)
	u8 dah_dit_compressed=0; 
	
	u8 dah_dit_count=0;
	u8 dah_dit_index=0;
	u32 offset_tms=0;
	
	while(array[char_index] != '\0')
	{
		if(array[char_index] != ' ')
		{
		    // Retrieves the compressed Morse code representation for the current character.
			// The code uses a lookup table called morse to obtain the Morse code pattern.
			// Manipulation of ASCII values allows the code to convert characters into suitable
			// indices for retrieving the Morse code count and compressed pattern from the lookup
			// table.
			dah_dit_count = morse[array[char_index]<='9'?array[char_index]-'0':(array[char_index]-'a'+10)]&0x07;
			dah_dit_compressed = morse[array[char_index]<='9'?array[char_index]-'0':(array[char_index]-'a'+10)]>>3;
		}
		// ternary operatior for number vs character
		for(dah_dit_index=0;dah_dit_index<dah_dit_count;dah_dit_index++)
		{
			offset_tms += timebase_millis*((dah_dit_compressed&0x01)?3:1);
			if(offset_tms>millis_elapsed) return 1+(dah_dit_compressed&0x01);
			offset_tms += timebase_millis;
			if(offset_tms>millis_elapsed) return 0;
			dah_dit_compressed = dah_dit_compressed>>1;
		}
		offset_tms += timebase_millis*2;
		if(offset_tms>millis_elapsed) return 0;
		if(array[char_index]==' ')
		{
			offset_tms += timebase_millis*4;
			if(offset_tms>millis_elapsed) return 0;
		}
		char_index++;
	}
	return 0;
}

//period




//void set_led_count(u8 led_count);//led_count [0-41]

u8 sleep_amount=250;//max sleep duration before wrap-over occurs
bool buffer_index=pwm_state&0x01;//primary vs rendant side to pull data from

if(pwm_sleep_remaining>0)
{//if sleep remaining, keep sleeping

}else if(pwm_led_index<pwm_led_count)
	setMatrixHighZ();
	setLED(pwm_brightness[pwm_led_index][0][buffer_index]);
	pwm_sleep_remaining=pwm_brightness[pwm_led_index][1][buffer_index];
	pwm_led_index++;
}else{
	setMatrixHighZ();
	pwm_led_index=0;
	pwm_sleep_remaining=pwm_sleep[buffer_index];
	if(pwm_state&0x02) pwm_state^=0x03;//if flag to swap A/B is set, then clear the flag and swap sides
}
sleep_amount=pwm_sleep_remaining<sleep_amount?pwm_sleep_remaining:sleep_amount;
pwm_sleep_remaining-=sleep_amount;

TIM3->CCR1L = ( (TIM3->CCR1L) + sleep_amount )%250;


u8 main()
{
	while(1)
	{
		display_morse();
	}
}

//returns 0 for OFF, 1 for dit, 2 for dah
u8 display_morse()
{
	u8 dih_vs_dah,iter;
	u8 morse_space[]={0x01011101, 0x11010001, 0x01110001, ... }; // <-- fill in this part ("SPACE BITS R US" or similar) left to right with info about just whether leds should be on or off, no compression.  dit is a '1', dah is '111'
	//PARIS: 0 1 0 111 0 111 0 1 000 1 0 111 000 1 0 111
	//={0x01011101,0x11010001,0x01110001,0x0111... }
	//pad with 0s at the end as needed to fill in the final byte
	//PRECON: the MSB on the first byte shall be 0
	u8 morse_defcon[]={0x01011101, 0x11010001, 0x01110001, ... }; // <-- fill in this part for "DEFCON31"
	u16 sizeof_morse_list=is_space_sao()?sizeof(morse_space):sizeof(morse_defcon);
	dih_vs_dah=get_morse(is_space_sao()?morse_space:morse_defcon,sizeof_morse_list);
	for(iter=0;iter<WHITE_LED_COUNT;iter++)
	{
		if((dih_vs_dah==1 && dih_vs_dah&0x01) || dih_vs_dah==2)
		{//dih is every other LED ON, dah is all LEDs ON for longer time
			if(iter<RGB_LED_COUNT) set_rgb(iter,2,255);
			if(is_space_sao()) set_white(iter,255);
		}
	}
	flush_leds(WHITE_LED_COUNT+RGB_LED_COUNT+1);
}

//return 0 for OFF, dih as 1, or dah as 2
u8 get_morse(u8 *morse_list,u16 sizeof_morse_list)
{
	u16 morse_cycle=0x0008;//period of the morse code cycling in lengths of *units* (there are dead bands at the end of each cycle while the patterns waits to repeat - needs to be an even multiple of 2 to make the clock math easy
	u16 morse_shift=sizeof_morse_list;//number of *bytes* in morse_list
	while(morse_shift)
	{
		morse_cycle<<=1;
		morse_shift>>=1;
	}
	u16 morse_bit=(millis()>>6)&(morse_cycle-1);//>>6 reduces speed (64 ms per unit) to around 20 wpm.  &val makes this periodic every morse_cycle
	bool is_dit=get_morse_unit(morse_bit,&morse_list,sizeof_morse_list);
	bool is_dah_ish=get_morse_unit(morse_bit-1,&morse_list,sizeof_morse_list)||get_morse_unit(morse_bit+1,&morse_list,sizeof_morse_list);
	return is_dit+(is_dit&is_dah_ish);//0 if !is_dit.  1 if is_dit, but neither neighbor is ON.  2 if morse_bit is ON and at least one neighbor is too
}

//returns 1 if the LEDs should be ON at the given morse_bit, returns 0 if LEDs should be OFF
bool get_morse_unit(u16 morse_bit,u8 (*morse_list),u16 sizeof_morse_list)
{
	//if(morse_bit==0xFFFF) return 0;//value at index -1 --> save a line of code: PRECON is that morse_list shall have 0 as MSB on first byte, so the value at [-1] is undefined and also doesn't matter
	u16 morse_index=morse_bit>>3;//get the byte-wise index within the array
	if(morse_index>=sizeof_morse_list) return 0;
	u8 morse_shift=morse_bit&0x07;//3 LSBs are which bit within the byte to fetch
	return (*morse_list)[morse_index]>>(7-morse_shift)&0x01;//use "7-" to make it easier to generate and read the list constructor left-to-right
}